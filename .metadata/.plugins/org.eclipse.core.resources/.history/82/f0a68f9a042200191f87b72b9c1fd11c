package org.nitin.stockprices.service;

import static org.nitin.stockprices.util.Constants.CHANGE_PERCENT;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;

import org.nitin.stockprices.model.Stock;
import org.nitin.stockprices.repository.CacheService;
import org.nitin.stockprices.repository.StockPriceRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class StockServiceImpl implements StockService {

	@Autowired
	private CacheService cacheService;

	@Autowired
	private StockPriceRepository stockPriceRepository;

	@Autowired
	private Map<String, String> symbols;

	@Override
	public BigDecimal getPrice(String symbol) {

		return cacheService.findPriceBySymbol(symbol);
	}

	@Override
	public void consumePrice(Stock inputStock) {

		String inputSymbol = inputStock.getSymbol();
		String inputSource = inputStock.getSource();
		BigDecimal inputPrice = inputStock.getPrice();

		synchronized (symbols.get(inputSymbol)) {

			Map<String, Stock> sourceMap = stockPriceRepository.findSourceMapBySymbol(inputSymbol);

			if (sourceMap == null) {
				
				Map<String, Stock> map = new HashMap<>();
				map.put(inputSource, inputStock);
				/*
				 * Entry for the symbol is absent and hence new entry should be added for the same.
				 */
				stockPriceRepository.saveSymbolSourceMap(inputSymbol, map);
			}
			Stock cachedStock = sourceMap.get(inputSource);
			
			if (null == cachedStock) {
				stockPriceRepository.saveSourceMap(inputSource, inputStock);
			}

			BigDecimal cachedStockPrice = cachedStock.getPrice();
			BigDecimal priceDiff = inputPrice.subtract(cachedStockPrice);
			BigDecimal percentChange = priceDiff.divide(cachedStockPrice).multiply(BigDecimal.valueOf(100)).abs();
			int change = CHANGE_PERCENT.compareTo(percentChange);

			if (change == 0 || change == -1) {
				cachedStock.setPrice(inputPrice);

				/*
				 * Removing the value from cache as it is stale. On subsequent fetch the value
				 * will be recalculated and cached.
				 */
				cacheService.removeFromCache(inputSymbol);

			}
		}
	}
}
